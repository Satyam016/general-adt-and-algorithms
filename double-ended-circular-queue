/* *
 * Code - double-ended circular queue, Author - Satyarth Agrahari
 * --------------------------------------------------------------
 * The following is a double ended circular queue implementation 
 * in c language. It is used to insert and delete elements at the 
 * both ends of the queue.
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_SIZE 10000
#define ERROR -999999999
#define SUCCESS 1

/* *
 * Structure definition of our queue
 * ---------------------------------
 */
typedef struct {
	int que[MAX_SIZE];
	int front;
	int rear;
} queue;

queue* create_queue(void);		//the function to create a new queue
int is_full(queue *);			//the function to check whether queue is full or not
int is_empty(queue *);			//the function to check whether queue is empty or not
void enqueue(queue *, int, char);	//the function to insert data at the back of the queue
int dequeue(queue *, char);		//to remove and return the data at front
int front(queue *, char);		//to return the front element without deleting

int main()
{
	queue *q = create_queue();
	int data;
	char str[30], ch[2];

	//driver code
	//str stores the command to be executed
	scanf("%s", str);	

	// works till the user types exit
	while (strcmp(str, "exit") != 0) {
		if (strcmp(str, "enqueue") == 0) {
			// we have to get the data, and the position f (front) or r(rear)
			scanf("%d%s", &data, ch);

			//passing the value of position
			enqueue(q, data, ch[0]);
		} else if (strcmp(str, "dequeue") == 0) {
			//gets the position
			scanf("%s", ch);
			data = dequeue(q, ch[0]);

			// if the data value returned is not an error, 
			// means the queue is not empty
			if (data != ERROR) {
				printf("The data in the front was %d\n", data);
			}
		} else if (strcmp(str, "front") == 0) {
			scanf("%s", ch);
			data = front(q, ch[0]);

			// checking for queue to not be empty
			if (data != ERROR) {
				printf("The data in the front is %d\n", data);
			}
		}

		scanf("%s", str);
	}

	return 0;
}

/* *
 * create_queue()
 * ----------------------------------------------
 * The function to create a queue and return the 
 * adders of queue. The front and rear are initialised
 * to -1 index.
 */
queue* create_queue(void)
{
	//allocate memeory and initilise front and rear
	queue *q = (queue *)malloc(sizeof(queue));
	q->front = -1;
	q->rear = -1;
	return q;
}

/* *
 * is_full()
 * ----------------------------------------------
 * The function is used to check if the queue is
 * full or not. if the queue is full success is returned
 * else error is returned.
 */
int is_full(queue *q)
{
	// if the front and rear will overlap after increament
 	// it means that the queue is full
	return (((q->rear + 1) % MAX_SIZE) == q->front);
}

/* *
 * is_empty()
 * ----------------------------------------------
 * The function is used to check if the queue is
 * empty or not. if the queue is empty success is 
 * returned else error is returned.
 */
int is_empty(queue *q)
{
	// in an empty queue, both rear and front points
	// to the same index, that is -1
	return ((q->rear == -1) && (q->front == -1));
}

/* *
 * enqueue()
 * ----------------------------------------------
 * The function to enter data at the end of the queue
 * We increse the value of rear and then add the 
 * element at the rear index.
 */
void enqueue(queue *q, int data, char pos)
{
	if (is_full(q)) {
		printf("Overflow\n");
	} else if (is_empty(q)) {
		//we have to increament both front and rear
		//in order to make both index positive
		q->front++;
		q->que[++(q->rear)] = data;
	} else {
		if (pos == 'f') {
			// we have set front to one step earlier in the
			// circular queue.
			q->front = (q->front + MAX_SIZE - 1) % MAX_SIZE;
			q->que[q->front] = data;
		} else if (pos == 'r') {
			// we have to increase the counter for
			// rear to point at next free location
			q->rear = (q->rear + 1) % MAX_SIZE;
			q->que[q->rear] = data;
		}
	}
}

/* *
 * dequeue()
 * ----------------------------------------------
 * The function to remove data at start of queue
 * We increse the value of front. The array now 
 * store a garbage value at previous index. The 
 * front value is returned also.
 */
int dequeue(queue *q, char pos)
{
	int data;
	if (is_empty(q)) {
		printf("Underflow\n");
		return ERROR;
	} else if (q->front == q->rear) {
		// to store data to be returned
		data = q->que[q->front];

		// setting both the indexex back to -1
		q->front = -1;
		q->rear = -1;		
	} else {
		if (pos == 'f') {
			// increameting f in circular fashion
			data = q->que[q->front];
			q->front = (q->front + 1) % MAX_SIZE;
		} else if (pos == 'r') {
			// decrementing r in circular fashion
			data = q->que[q->rear];
			q->rear = (q->rear -1 + MAX_SIZE) % MAX_SIZE;
		}
	}

	return data;
}

/* *
 * front()
 * ----------------------------------------------
 * The function to return data at start of queue
 * We increse the value of front. The array now 
 * store a garbage value at previous index. The 
 * front value is returned also.
 */
int front(queue *q, char pos)
{
	if (is_empty(q)) {
		printf("Underflow\n");
		return ERROR;
	} else {
		if (pos == 'f') {
			return (q->que[q->front]);
		} else if (pos == 'r') {
			return (q->que[q->rear]);
		}
	}
}
