/* *
 * Code - balanced paranthesis, Author - Satyarth Agrahari
 * ---------------------------------------------------------------------
 * The following program is a c++ implementation of balanced paranthesis
 */
#include <iostream>
#include <cstring>

using namespace std;

#define MAX_SIZE 100000
#define ERROR -99999999
#define SUCCESS 1

/*
 *	stack structure
 *	---------------------------------------------------
 *	it has an array to store the values and a top variable to store the 
 * 	index of topmost element.
 */
struct stack {
	int top;
	char stk[MAX_SIZE];
};

stack* create_stack(void); // to create a new stack and return the address of the stack
bool is_empty(stack *); //to check whether the given stack is empty or not
bool is_full(stack *); //to check whether the given stack is full or not
int size(stack *); //to get the nummber of elements in the stack
char top(stack *); // to get the topmost element in the stack
void push(stack *, char); // to insert a data at the top of the stack
char pop(stack *); //to retrun the top most data of the stack and return it
char get_pair(char ); // to return the pair of paranthesis

int main()
{
	int i, len;
	bool match = true;
	char str[MAX_SIZE];
	cin>>str;
	len = strlen(str);
	
	stack *s = create_stack();

	for (i = 0; i < len; i++) {
		if (str[i] == '(' || str[i] == '{' || str[i] == '[') {
			push(s, str[i]);
		} else {
			if (is_empty(s) || get_pair(top(s)) != str[i]) {
				match = false;
				break;
			} else {
				pop(s);
			}
		}
	}	

	if (!is_empty(s) || match == false) {
		cout<<"The paranthesis is not balanced."<<endl;
	} else {
		cout<<"The paranthesis is balanced."<<endl;
	}	

	return 0;
}

/* *
 * get_pair()
 * -------------------------------------------------
 * the function returns the pair of bracket recieved
 *
 */
char get_pair(char c) 
{
	char ans;
	switch (c) {
		case '{': ans = '}'; break;
		case '(': ans = ')'; break;
		case '[': ans = ']'; break;
	}
	return ans;
}

/*-------------------------------------------------------* stack - functions *---------------------------------------------------------*/

/*	create_stack()
 *	----------------------------------------------------
 *	this function allocates a memory in heap and returns 
 *	the base address to the calling pointer.
 *	It also allocates the top to point at a negative index.
*/
stack* create_stack(void)
{
	stack *s = new stack;
	s->top = -1;
	return s;
}

/*	is_empty()
 *	----------------------------------------------------
 *	This function checks whether the given stack is empty or not.
 *	The value returned will be true if the stack is empty and 
 *	false if the stack has atleast one element
 */
bool is_empty(stack *s)
{
	return (s->top == -1);
}

/*	is_full()
 *	----------------------------------------------------
 *	This function checks whether the given stack is full or not.
 *	The value returned will be true if the stack is full and 
 *	false if the stack has space for atleast one element
 */
bool is_full(stack *s)
{
	return (s->top == (MAX_SIZE - 1));
}

/*	size()
 *	----------------------------------------------------
 *	this function returns the number of elements present in the stack
 */
int size(stack *s)
{
	return (s->top + 1);
}

/*	top()
 *	----------------------------------------------------
 *	This function returns the top most value of the stack.
 *	In case the stack is empty, the function returns an ERROR value
 *	to be handled effectivly by the coder.
 */
char top(stack *s)
{
	if (is_empty(s)) {
		//add error condition according to your choice
		//and program specification
	} else {
		return (s->stk[s->top]);
	}
}

/*	push()
 *	----------------------------------------------------
 *	this function adds the data at the top of the stack.
 *	in case of overflow it returns an ERROR to be handled by the coder
 */
void push(stack *s, char data)
{
	if (is_full(s)) {
		//create an error handle condition according to program specification
	} else {
		s->stk[++(s->top)] = data;
	}
}

/*	pop()
 *	----------------------------------------------------
 *	this function removes and returns the data at the top of the stack.
 *	in case of underflow it returns an ERROR to be managed by the coder
 */
char pop(stack *s)
{
	if (is_empty(s)) {
		// create error handle
	} else {
		return (s->stk[(s->top)--]);
	}
}
